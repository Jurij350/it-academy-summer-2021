# Реализовать функцию get_ranges которая
# получает на вход непустой список
# неповторяющихся целых чисел, отсортированных
# по возрастанию, которая этот список “сворачивает”
# get_ranges([0, 1, 2, 3, 4, 7, 8, 10])
# // "0-4,7-8,10"
# get_ranges([4,7,10]) // "4,7,10"
# get_ranges([2, 3, 8, 9]) // "2-3,8-9"

# Входные данные список чисел
# который уже отсортирован
new_list = [0, 1, 2, 3, 4, 7, 8, 10]
new_list_1 = [4, 7, 10]
new_list_2 = [2, 3, 8, 9]


def get_ranges(new_list):
    # Разбиваем список на отдельные списки для
    # того чтобы с ними работать. Списки все
    # отсортированы по возрастанию без разрывов
    result = [[new_list[0]]]
    result_str = ''
    for i, j in enumerate(new_list[1:], 1):
        if j - new_list[i - 1] == 1:
            result[-1].append(j)
        else:
            result.append([j])
    # Через цикл записываем крайние значения
    # списков в общую строку с соответствующим
    # синтаксисом.
    for i, j in enumerate(result):
        if len(j) > 2:
            result_str = result_str + (str(j[0]) + '-' + str(j[-1]) + ',')
        elif len(j) == 2:
            result_str = result_str + (str(j[0]) + '-' + str(j[-1]) + ',')
        elif len(j) == 1:
            result_str = result_str + (str(j[-1]) + ',')
    # Мы не можем знать какая группа элементов будет
    # в конце строки по этому удаляем последнюю
    # запятую в конце строки и перезаписываем строку
    result_str = result_str[0:-1]
    return result_str


# Вызываем функцию и выводим ее на печать.
# Функция работает с любым списком
# отсортированных чисел. Выводим разные
# списки согласно условию
print(get_ranges(new_list))
print(get_ranges(new_list_1))
print(get_ranges(new_list_2))
